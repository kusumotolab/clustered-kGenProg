/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.6/userguide/tutorial_java_projects.html
 */

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.7'
  }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
    
    id "com.google.protobuf" version "0.8.7"
    id 'eclipse'
    id 'idea'
}

repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

def grpcVersion = '1.16.1'

dependencies {
    compile project(':main')
    testCompile project(':main').sourceSets.test.output
    
    compile group: 'io.grpc', name: 'grpc-netty-shaded', version: grpcVersion
    compile group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion
    compile group: 'io.grpc', name: 'grpc-stub', version: grpcVersion
    
    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.10.0'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
    testCompile group: 'io.grpc', name: 'grpc-testing', version: grpcVersion
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1-1'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/proto'
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task kGenProgCoordinator(type: CreateStartScripts) {
    mainClassName = 'jp.kusumotolab.kgenprog.coordinator.CoordinatorLauncher'
    applicationName = 'kGenProg-coordinator'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task kGenProgClient(type: CreateStartScripts) {
    mainClassName = 'jp.kusumotolab.kgenprog.client.ClientLauncher'
    applicationName = 'kGenProg-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task kGenProgWorker(type: CreateStartScripts) {
    mainClassName = 'jp.kusumotolab.kgenprog.worker.WorkerLauncher'
    applicationName = 'kGenProg-worker'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(kGenProgCoordinator)
    from(kGenProgClient)
    from(kGenProgWorker)
    fileMode = 0755
}

