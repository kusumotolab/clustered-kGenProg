syntax = "proto3";

option java_multiple_files = true;
option java_package = "jp.kusumotolab.kgenprog.grpc";

package kgenprog;

service KGenProgCluster {
  /*
   * クラスタにプロジェクトを登録する
   */
  rpc registerProject (GrpcRegisterProjectRequest) returns (GrpcRegisterProjectResponse) {}

  /*
   * テストを実行する
   */
  rpc executeTest (GrpcExecuteTestRequest) returns (GrpcExecuteTestResponse) {}

  /*
   * クラスタからプロジェクトを登録解除する
   */
  rpc unregisterProject (GrpcUnregisterProjectRequest) returns (GrpcUnregisterProjectResponse) {}
}

service CoordinatorService {
  /*
   * コーディネータにワーカーを登録する
   */
  rpc registerWorker (GrpcRegisterWorkerRequest) returns (GrpcRegisterWorkerResponse) {}

  /*
   * コーディネータから修正対象プロジェクトを取得する
   */
  rpc getProject (GrpcGetProjectRequest) returns (GrpcGetProjectResponse) {}
}

service WorkerService {
  /*
   * テストを実行する
   */
  rpc executeTest (GrpcExecuteTestRequest) returns (GrpcExecuteTestResponse) {}

  /*
   * ワーカーからプロジェクトを登録解除する
   */
  rpc unregisterProject (GrpcUnregisterProjectRequest) returns (GrpcUnregisterProjectResponse) {}
}

message GrpcRegisterProjectRequest {
  /*
   * プロジェクトやKGenProgに関する設定
   */
  GrpcConfiguration configuration = 1;

  /*
   * プロジェクトをzip圧縮したbyte列
   */
  bytes project = 2;
}

message GrpcConfiguration {
  /*
   * プロジェクトのルートディレクトリ
   */
  string rootDir = 1;

  /*
   * 製品ソースコードへのパス
   */
  repeated string productPaths = 2;

  /*
   * テストソースコードへのパス
   */
  repeated string testPaths = 3;

  /*
   * クラスパス
   */
  repeated string classPaths = 4;

  /*
   * 実行対象テストケース
   */
  repeated string executionTests = 5;

  /*
   * テストのタイムアウト時間
   */
  int32 testTimeLimit = 6;
}


message GrpcRegisterProjectResponse {
  /*
   * 通信ステータス
   */
  int32 status = 1;

  /*
   * 登録されたプロジェクトのID
   */
  int32 projectId = 2;
}

message GrpcExecuteTestRequest {
  /*
   * 対象プロジェクトID
   */
  int32 projectId = 1;

  /*
   * 遺伝子（初期状態からの操作列）
   */
  GrpcGene gene = 2;
}

message GrpcGene {
  /*
   * 初期状態からプロジェクトに行う操作の列
   */
  repeated GrpcBase base = 1;
}

message GrpcBase {
  /*
   * 操作を行う場所
   */
  GrpcASTLocation location = 1;

  /*
   * 行う操作
   */
  GrpcOperation operation = 2;
}

message GrpcASTLocation {
  /*
   * 対象ファイルへのパス
   */
  string sourcePath = 1;

  /*
   * ASTのルートから対象ノードへのパス
   */
  repeated GrpcTreePathElement location = 2;
}

message GrpcTreePathElement {
  /*
   * 子ノードの種類ID
   */
  string propertyId = 1;

  /*
   * Blockのように子がListになっているノードの場合、対象子ノードのIndex
   */
  int32 index = 2;
}

message GrpcOperation {
  enum Type {
  	INSERT = 0;
  	DELETE = 1;
  	REPLACE = 2;
  }

  /*
   * 操作の種類
   */
  Type type = 1;

  /*
   * 挿入や置換に用いられるStatement
   */
  string statement = 2;
}

message GrpcExecuteTestResponse {
  /*
   * 通信ステータス
   */
  int32 status = 1;

  /*
   * テスト実行結果
   */
  GrpcTestResults testResults = 2;
}

message GrpcTestResults {
  /*
   * テストが失敗し、結果が空かどうか
   */
  bool empty = 1;

  /*
   * テストメソッドのFQNとその結果のmap
   */
  map<string, GrpcTestResult> value = 2;

  /*
   * ビルド結果に関する情報
   */
  GrpcBuildResults buildResults = 3;
}

message GrpcTestResult {
  /*
   * 実行したテストメソッドのFQN
   */
  string executedTestFQN = 1;

  /*
   * テストの成否
   */
  bool failed = 2;

  /*
   * テストによって実行されたクラスとそのCoverageのmap
   */
  map<string, GrpcCoverage> coverage = 3;
}

message GrpcCoverage {
  enum Status {
    EMPTY = 0;
    NOT_COVERED = 1;
    COVERED = 2;
    PARTLY_COVERED = 3;
  }

  /*
   * テストによって実行されたクラス
   */
  string executedTargetFQN = 1;

  /*
   * 各行のStatus
   */
  repeated Status status = 2;
}

message GrpcBuildResults {
  /*
   * ソースパスからそのソースコードに含まれるクラスのFQNへのmap
   */
  map<string, GrpcFullyQualifiedNames> sourcePathToFQN = 1;
}

message GrpcFullyQualifiedNames {
  /*
   * FQN
   */
  repeated string name = 1;
}

message GrpcUnregisterProjectRequest {
  /*
   * 登録解除したいプロジェクトID
   */
  int32 projectId = 1;
}

message GrpcUnregisterProjectResponse {
  /*
   * 通信ステータス
   */
  int32 status = 1;
}

message GrpcRegisterWorkerRequest {
  /*
   * 登録するワーカーのポート番号
   */
  int32 port = 1;
}

message GrpcRegisterWorkerResponse {
  /*
   * 通信ステータス
   */
  int32 status = 1;
}

message GrpcGetProjectRequest {
  /*
   * 取得したいプロジェクトのID
   */
  int32 projectId = 1;
}

message GrpcGetProjectResponse {
  /*
   * 通信ステータス
   */
  int32 status = 1;

  /*
   * プロジェクトやKGenProgに関する設定
   */
  GrpcConfiguration configuration = 2;

  /*
   * プロジェクトをzip圧縮したbyte列
   */
  bytes project = 3;
}
