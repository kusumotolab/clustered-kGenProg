syntax = "proto3";

option java_multiple_files = true;
option java_package = "jp.kusumotolab.kgenprog.grpc";

package kgenprog;

service KGenProgCluster {
  /*
   * クラスタにプロジェクトを登録する
   */
  rpc registerProject (RegisterProjectRequest) returns (RegisterProjectResponse) {}

  /*
   * テストを実行する
   */
  rpc executeTest (ExecuteTestRequest) returns (ExecuteTestResponse) {}

  /*
   * クラスタからプロジェクトを登録解除する
   */
  rpc unregisterProject (UnregisterProjectRequest) returns (UnregisterProjectResponse) {}
}

message RegisterProjectRequest {
  /*
   * プロジェクトやKGenProgに関する設定
   */
  Configuration configuration = 1;

  /*
   * プロジェクトをzip圧縮したbyte列
   */
  bytes project = 2;
}

message Configuration {

}

message RegisterProjectResponse {
  /*
   * 通信ステータス
   */
  int32 status = 1;

  /*
   * 登録されたプロジェクトのID
   */
  int32 projectId = 2;
}

message ExecuteTestRequest {
  /*
   * 対象プロジェクトID
   */
  int32 projectId = 1;

  /*
   * 遺伝子（初期状態からの操作列）
   */
  Gene gene = 2;
}

message Gene {
  /*
   * 初期状態からプロジェクトに行う操作の列
   */
  repeated Base base = 1;
}

message Base {
  /*
   * 操作を行う場所
   */
  ASTLocation location = 1;

  /*
   * 行う操作
   */
  Operation operation = 2;
}

message ASTLocation {
  /*
   * 対象ファイルへのパス
   */
  string sourcePath = 1;

  /*
   * ASTのルートから対象ノードへのパス
   */
  repeated TreePathElement location = 2;
}

message TreePathElement {
  /*
   * 子ノードの種類ID
   */
  string propertyId = 1;

  /*
   * Blockのように子がListになっているノードの場合、対象子ノードのIndex
   */
  int32 index = 2;
}

message Operation {
  enum Type {
  	INSERT = 0;
  	DELETE = 1;
  	REPLACE = 2;
  }

  /*
   * 操作の種類
   */
  Type type = 1;

  /*
   * 挿入や置換に用いられるStatement
   */
  string statement = 2;
}

message ExecuteTestResponse {
  /*
   * 通信ステータス
   */
  int32 status = 1;

  /*
   * テスト実行結果
   */
  TestResults testResults = 2;
}

message TestResults {
  /*
   * テストメソッドのFQNとその結果のmap
   */
  map<string, TestResult> value = 1;
}

message TestResult {
  /*
   * 実行したテストメソッドのFQN
   */
  string executedTestFQN = 1;

  /*
   * テストの成否
   */
  bool failed = 2;

  /*
   * テストによって実行されたクラスとそのCoverageのmap
   */
  map<string, Coverage> coverage = 3;
}

message Coverage {
  enum Status {
    EMPTY = 0;
    NOT_COVERED = 1;
    COVERED = 2;
    PARTLY_COVERED = 3;
  }

  /*
   * テストによって実行されたクラス
   */
  string executedTargetFQN = 1;

  /*
   * 各行のStatus
   */
  repeated Status status = 2;
}

message UnregisterProjectRequest {
  /*
   * 登録解除したいプロジェクトID
   */
  int32 projectId = 1;
}

message UnregisterProjectResponse {
  /*
   * 通信ステータス
   */
  int32 status = 1;
}
